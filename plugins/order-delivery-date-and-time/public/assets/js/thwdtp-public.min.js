function init_thwdtp() {
	thwdtp_public.initialize_thwdtp();
}
var thwdtp_public_base = ( function ( $, window, document ) {
		'use strict';
		function isInputField( field ) {
			if ( field && field.length > 0 ) {
				var tagName = field[ 0 ].tagName.toLowerCase();
				if (
					$.inArray( tagName, [ 'input', 'select', 'textarea' ] ) > -1
				)
					return ! 0;
			}
			return ! 1;
		}
		function getInputField( key ) {
			var field = null;
			return (
				key &&
					( ( field = $( '#' + key ) ),
					isInputField( field ) ||
						( ( field = $( "input[name='" + key + "']" ) ),
						isInputField( field ) ||
							( ( field = $( "input[name='" + key + "[]']" ) ),
							isInputField( field ) ||
								( field = $(
									"input[name='" + key + "[0]']"
								) ) ) ) ),
				field
			);
		}
		function set_field_value_by_elm( elm, type, value ) {
			switch ( type ) {
				case 'radio':
					elm.val( [ value ] );
					break;
				case 'checkbox':
					1 == elm.data( 'multiple' )
						? ( ( value = value || [] ), elm.val( value ) )
						: elm.val( [ value ] );
					break;
				case 'select':
					elm.prop( 'multiple' )
						? elm.val( value )
						: elm.val( [ value ] );
					break;
				default:
					elm.val( value );
			}
		}
		function get_field_value( type, elm, name ) {
			var value = '';
			switch ( type ) {
				case 'radio':
					value = $(
						"input[type=radio][name='" + name + "']:checked"
					).val();
					break;
				case 'checkbox':
					if ( 1 == elm.data( 'multiple' ) ) {
						var valueArr = [];
						$(
							"input[type=checkbox][name='" +
								name +
								"[]']:checked"
						).each( function () {
							valueArr.push( $( this ).val() );
						} ),
							( value = valueArr );
					} else
						value = $(
							'input[type=checkbox][name=' + name + ']:checked'
						).val();
					break;
				case 'select':
				case 'multiselect':
				default:
					value = elm.val();
			}
			return value;
		}
		return (
			( $.fn.getType = function () {
				try {
					return 'INPUT' == this[ 0 ].tagName
						? this[ 0 ].type.toLowerCase()
						: this[ 0 ].tagName.toLowerCase();
				} catch ( err ) {
					return 'E001';
				}
			} ),
			{
				set_field_value_by_elm: set_field_value_by_elm,
				get_field_value: get_field_value,
				isInputField: isInputField,
				getInputField: getInputField,
			}
		);
	} )( window.jQuery, window, document ),
	thwdtp_public = ( function ( $, window, document ) {
		'use strict';
		function initialize_thwdtp() {
			$( '#thwdtp_pickup_datepicker_field' ).css( 'display', 'none' ),
				$( '#thwdtp_pickup_datepicker_field' ).removeClass(
					'validate-required'
				),
				$( '#thwdtp_pickup_datepicker_field' ).removeClass(
					'woocommerce-validated'
				),
				$( '#thwdtp_delivery_time_field' ).css( 'display', 'none' ),
				$( '#thwdtp_pickup_time_field' ).css( 'display', 'none' ),
				0 != thwdtp_public_var.enable_delivery_date
					? ( $( '#thwdtp_delivery_datepicker_field' ).css(
							'display',
							'block'
					  ),
					  setup_delivery_datepicker() )
					: 0 != thwdtp_public_var.enable_delivery_time &&
					  ( set_time_picker_today( 'delivery_time' ),
					  $( '#thwdtp_delivery_time_field' ).css(
							'display',
							'block'
					  ) );
			var checkout_form = $( 'form[name="checkout"]' );
			if ( checkout_form ) {
				$( document ).on( 'updated_checkout', function () {
					1 == thwdtp_public_var.based_on_shipping
						? setup_custom_fields_on_shipping_method()
						: ( $( '#thwdtp_pickup_datepicker_field' ).css(
								'display',
								'none'
						  ),
						  $( '#thwdtp_pickup_datepicker_field' ).removeClass(
								'validate-required'
						  ),
						  $( '#thwdtp_pickup_datepicker_field' ).removeClass(
								'woocommerce-validated'
						  ),
						  $( '#thwdtp_pickup_time_field' ).css(
								'display',
								'none'
						  ),
						  setup_delivery_datepicker() );
				} );
				checkout_form
					.find( 'select.thwdtp-enhanced-select' )
					.each( function () {
						var ms = $( this );
						ms.selectWoo( {
							minimumResultsForSearch: 10,
							allowClear: ! 0,
							placeholder: ms.data( 'placeholder' ),
							maximumSelectionLength: ms.data( 'maxselections' ),
						} ).addClass( 'enhanced' );
					} );
			}
		}
		function setup_delivery_datepicker() {
			var settings = thwdtp_public_var.delivery_date_props,
				current_date = thwdtp_public_var.current_date,
				current_time = thwdtp_public_var.current_time,
				enable_delivery_date = settings.enable_delivery_date,
				min_time_preperation = settings.min_preperation_days_delivery,
				allowable_days = settings.allowable_days_delivery,
				allowable_days = allowable_days || 365,
				autoselect_first_day = settings.auto_select_first_date,
				date_format = settings.delivery_date_format,
				off_days = settings.delivery_off_days,
				week_start_date = settings.week_start_date,
				time_props = thwdtp_public_var.delivery_time_props,
				enable_time_picker = time_props.enable_delivery_time,
				min_days_prep = min_time_preperation
					? get_valid_time_start(
							min_time_preperation,
							current_time,
							'days'
					  )
					: 0,
				max_date =
					parseInt( min_days_prep ) + parseInt( allowable_days ) - 1,
				default_date =
					1 == autoselect_first_day
						? new Date( current_date ).fp_incr( min_days_prep )
						: '',
				set_offdays = [];
			$.isArray( off_days ) &&
				$.each( off_days, function ( key, value ) {
					set_offdays.push( parseInt( value ) );
				} );
			var holidays = thwdtp_public_var.holidays,
				spec_days = thwdtp_public_var.specific_dates;
			if ( enable_delivery_date ) {
				var args = {
					altInput: ! 0,
					altFormat: date_format,
					dateFormat: 'Y-m-d',
					minDate: new Date( current_date ).fp_incr( min_days_prep ),
					maxDate: new Date( current_date ).fp_incr( max_date ),
					defaultDate: default_date,
					locale: { firstDayOfWeek: week_start_date },
					disable: [
						function ( date ) {
							var test = ! 1;
							-1 != $.inArray( date.getDay(), set_offdays ) &&
								( test = ! 0 );
							var c_yr = date.getFullYear(),
								c_month =
									date.getMonth() + 1 < 10
										? '0' + ( date.getMonth() + 1 )
										: date.getMonth() + 1,
								c_day =
									date.getDate() < 10
										? '0' + date.getDate()
										: date.getDate(),
								c_date = c_yr + '-' + c_month + '-' + c_day;
							return (
								holidays &&
									-1 != $.inArray( c_date, holidays ) &&
									( test = ! 0 ),
								spec_days &&
									-1 != $.inArray( c_date, spec_days ) &&
									( test = ! 1 ),
								test
							);
						},
					],
					onChange: function ( selectedDates, dateStr, instance ) {
						set_time_picker(
							selectedDates,
							dateStr,
							instance,
							'delivery_time',
							enable_time_picker,
							min_time_preperation
						);
					},
					onReady: function ( selectedDates, dateStr, instance ) {
						default_date &&
							dateStr &&
							set_time_picker(
								selectedDates,
								dateStr,
								instance,
								'delivery_time',
								enable_time_picker,
								min_time_preperation
							);
					},
				};
				flatpickr( '#thwdtp_delivery_datepicker', args ),
					$( document.body ).trigger( 'flatpickr-set' );
			}
		}
		function setup_pickup_datepicker() {
			var date_props = thwdtp_public_var.pickup_date_props,
				current_date = thwdtp_public_var.current_date,
				current_time = thwdtp_public_var.current_time,
				enable_delivery_date = date_props.enable_pickup_date,
				min_time_preperation = date_props.min_preperation_time_pickup,
				allowable_days = date_props.allowable_days_pickup,
				allowable_days = allowable_days || 365,
				autoselect_first_day = date_props.auto_select_first_date_pickup,
				date_format = date_props.pickup_date_format,
				off_days = date_props.pickup_off_days,
				week_start_date = date_props.week_start_date_pickup,
				min_days_prep = min_time_preperation
					? get_valid_time_start(
							min_time_preperation,
							current_time,
							'days'
					  )
					: 0,
				max_date =
					parseInt( min_days_prep ) + parseInt( allowable_days ) - 1,
				default_date =
					1 == autoselect_first_day
						? new Date( current_date ).fp_incr( min_days_prep )
						: '',
				time_props = thwdtp_public_var.pickup_time_props,
				enable_time_picker = time_props.enable_pickup_time,
				set_offdays = [];
			off_days &&
				$.isArray( off_days ) &&
				$.each( off_days, function ( key, value ) {
					set_offdays.push( parseInt( value ) );
				} );
			var holidays = thwdtp_public_var.holidays,
				spec_days = thwdtp_public_var.specific_dates;
			if ( enable_delivery_date ) {
				var args = {
					altInput: ! 0,
					altFormat: date_format,
					dateFormat: 'Y-m-d',
					minDate: new Date( current_date ).fp_incr( min_days_prep ),
					maxDate: new Date( current_date ).fp_incr( max_date ),
					locale: { firstDayOfWeek: week_start_date },
					disable: [
						function ( date ) {
							var test = ! 1;
							-1 != $.inArray( date.getDay(), set_offdays ) &&
								( test = ! 0 );
							var c_yr = date.getFullYear(),
								c_month =
									date.getMonth() + 1 < 10
										? '0' + ( date.getMonth() + 1 )
										: date.getMonth() + 1,
								c_day =
									date.getDate() < 10
										? '0' + date.getDate()
										: date.getDate(),
								c_date = c_yr + '-' + c_month + '-' + c_day;
							return (
								holidays &&
									-1 != $.inArray( c_date, holidays ) &&
									( test = ! 0 ),
								spec_days &&
									-1 != $.inArray( c_date, spec_days ) &&
									( test = ! 1 ),
								test
							);
						},
					],
					defaultDate: default_date,
					onChange: function ( selectedDates, dateStr, instance ) {
						set_time_picker(
							selectedDates,
							dateStr,
							instance,
							'pickup_time',
							enable_time_picker,
							min_time_preperation
						);
					},
					onReady: function ( selectedDates, dateStr, instance ) {
						default_date &&
							dateStr &&
							set_time_picker(
								selectedDates,
								dateStr,
								instance,
								'pickup_time',
								enable_time_picker,
								min_time_preperation
							);
					},
				};
				flatpickr( '#thwdtp_pickup_datepicker', args ),
					$( document.body ).trigger( 'flatpickr-set' );
			}
		}
		function setup_custom_fields_on_shipping_method() {
			if ( 1 == thwdtp_public_var.based_on_shipping ) {
				$( '#thwdtp_pickup_datepicker_field' ).css( 'display', 'none' ),
					$( '#thwdtp_delivery_datepicker_field' ).css(
						'display',
						'none'
					),
					$( '#thwdtp_delivery_time_field' ).css( 'display', 'none' ),
					$( '#thwdtp_pickup_time_field' ).css( 'display', 'none' );
				var enable_delivery_date =
						thwdtp_public_var.enable_delivery_date,
					enable_delivery_time =
						thwdtp_public_var.enable_delivery_time,
					enable_pickup_date = thwdtp_public_var.enable_pickup_date,
					enable_pickup_time = thwdtp_public_var.enable_pickup_time,
					field = $( "input[name='shipping_method[0]']" );
				if ( field && field.length > 0 ) {
					var ftype = field.getType();
					thwdtp_public_base
						.get_field_value( ftype, field, 'shipping_method[0]' )
						.includes( 'local_pickup' )
						? 0 != enable_pickup_date
							? ( $( '#thwdtp_pickup_datepicker_field' ).show(),
							  setup_pickup_datepicker(),
							  $( '#thwdtp_delivery_datepicker' ).change() )
							: 0 != enable_pickup_time &&
							  ( set_time_picker_today( 'pickup_time' ),
							  $( '#thwdtp_pickup_time_field' ).css(
									'display',
									'block'
							  ) )
						: 0 != enable_delivery_date
						? ( $( '#thwdtp_delivery_datepicker_field' ).css(
								'display',
								'block'
						  ),
						  setup_delivery_datepicker() )
						: 0 != enable_delivery_time &&
						  ( set_time_picker_today( 'delivery_time' ),
						  $( '#thwdtp_delivery_time_field' ).css(
								'display',
								'block'
						  ) );
				}
			}
		}
		function set_time_picker(
			selectedDates,
			dateStr,
			instance,
			elm,
			enable_time,
			prep_time
		) {
			if ( 0 != enable_time ) {
				var time_slot_elm = $( '#thwdtp_' + elm ),
					all_time_slots =
						'delivery_time' == elm
							? thwdtp_public_var.delivery_time_slots
							: thwdtp_public_var.pickup_time_slots,
					specific_dates = thwdtp_public_var.specific_dates,
					selected_day = new Date( selectedDates ).getDay(),
					selected_day = selected_day.toString(),
					current_time = thwdtp_public_var.current_time,
					valid_date_time_strt = get_valid_time_start(
						prep_time,
						current_time,
						'min_time_start'
					),
					valid_date = valid_date_time_strt.start_date,
					slot_disable = ! 1,
					valid_time_strt = '';
				valid_date.getTime() === selectedDates[ 0 ].getTime() &&
					( ( valid_time_strt = valid_date_time_strt.start_time ),
					( slot_disable = ! 0 ) ),
					time_slot_elm.empty(),
					time_slot_elm.append(
						'<option  value="">Select Time Slot</option>'
					),
					$( '#thwdtp_' + elm + '_field' ).css( 'display', 'block' );
				var specific = ! 1;
				$.each( all_time_slots, function ( key, time_slots ) {
					var available_time_slots = time_slots.slots
							? time_slots.slots
							: '',
						option = '',
						slot_days = time_slots.days,
						append = ! 1;
					if (
						( specific_dates.includes( dateStr ) &&
						slot_days &&
						slot_days.includes( dateStr )
							? ( ( append = ! (
									! slot_days ||
									! slot_days.includes( dateStr )
							  ) ),
							  ( specific = ! 0 ) )
							: ( append = ! (
									! slot_days ||
									! slot_days.includes( selected_day ) ||
									! 1 !== specific
							  ) ),
						append )
					) {
						if (
							( ! 0 === specific &&
								time_slot_elm
									.find( 'option' )
									.remove()
									.end()
									.append(
										'<option value="">Select Time Slot</option>'
									),
							available_time_slots )
						)
							for (
								var i = 0;
								i < available_time_slots.length;
								i++
							)
								if ( slot_disable ) {
									var strt_slot =
											available_time_slots[ i ].split(
												'-'
											),
										slot_strt_time = convertTime12to24(
											strt_slot[ 0 ]
										);
									slot_strt_time >= valid_time_strt &&
										( option +=
											'<option value="' +
											available_time_slots[ i ] +
											'">' +
											available_time_slots[ i ] +
											'</option>' );
								} else
									option +=
										'<option value="' +
										available_time_slots[ i ] +
										'">' +
										available_time_slots[ i ] +
										'</option>';
						time_slot_elm.append( option );
					}
				} );
			}
		}
		function get_valid_time_start( min, time, type ) {
			var min_date_time = [],
				current_date = thwdtp_public_var.current_date,
				t = time.split( ':' ),
				t_h = Number( t[ 0 ] ),
				t_m = Number( t[ 1 ] ),
				m = min % 60,
				hrs = Math.floor( min / 60 ),
				h = Math.floor( hrs % 24 ),
				d = Math.floor( min / 1440 );
			( h += t_h ),
				( m += t_m ),
				h >= 24 && ( d++, ( h -= 24 ) ),
				m >= 60 && ( h++, ( m -= 60 ) );
			var start_time =
					( h + '' ).padStart( 2, '0' ) +
					':' +
					( m + '' ).padStart( 2, '0' ),
				start_date = new Date( current_date ).fp_incr( d );
			return (
				( min_date_time.start_date = start_date ),
				( min_date_time.start_time = start_time ),
				'days' == type ? d : min_date_time
			);
		}
		function set_time_picker_today( elm ) {
			var time_slot_elm = $( '#thwdtp_' + elm ),
				all_time_slots =
					'delivery_time' == elm
						? thwdtp_public_var.delivery_time_slots
						: thwdtp_public_var.pickup_time_slots,
				specific_dates = thwdtp_public_var.specific_dates,
				current_date = thwdtp_public_var.current_date,
				selected_day = new Date( current_date ).getDay(),
				selected_day = selected_day.toString(),
				dateStr = new Date( current_date ).toISOString().slice( 0, 10 );
			if ( 'delivery_time' == elm )
				var time_props = thwdtp_public_var.delivery_time_props,
					prep_time = time_props.min_preperation_time_delivery
						? time_props.min_preperation_time_delivery
						: '';
			else
				var time_props = thwdtp_public_var.pickup_time_props,
					prep_time = time_props.min_preperation_time_pickup
						? time_props.min_preperation_time_pickup
						: '';
			$( '#thwdtp_' + elm + '_field' ).css( 'display', 'block' );
			var specific = ! 1;
			time_slot_elm.empty(),
				time_slot_elm.append(
					'<option  value="">Select Time Slot</option>'
				),
				$.each( all_time_slots, function ( key, time_slots ) {
					var available_time_slots = time_slots.slots,
						option = '',
						slot_days = time_slots.days,
						append = ! 1;
					if (
						( specific_dates.includes( dateStr ) &&
						slot_days &&
						slot_days.includes( dateStr )
							? ( ( append = ! 0 ), ( specific = ! 0 ) )
							: ( append = ! (
									! slot_days ||
									! slot_days.includes( selected_day ) ||
									! 1 !== specific
							  ) ),
						! 0 === append )
					) {
						! 0 === specific &&
							time_slot_elm
								.find( 'option' )
								.remove()
								.end()
								.append(
									'<option value="">Select Time Slot</option>'
								);
						for (
							var i = 0;
							i < available_time_slots.length;
							i++
						) {
							check_valid_time_slot_today(
								convertTime12to24(
									available_time_slots[ i ].split( '-' )[ 0 ]
								),
								prep_time
							) &&
								( option +=
									'<option value="' +
									available_time_slots[ i ] +
									'">' +
									available_time_slots[ i ] +
									'</option>' );
						}
						time_slot_elm.append( option );
					}
				} );
		}
		function check_valid_time_slot_today( slot_time, prep_time ) {
			var $valid = ! 1,
				time = thwdtp_public_var.current_time,
				min = prep_time,
				t = time.split( ':' ),
				h = Number( t[ 0 ] ),
				m = Number( t[ 1 ] );
			return (
				( m += min % 60 ),
				( h += Math.floor( min / 60 ) ),
				m >= 60 && ( h++, ( m -= 60 ) ),
				slot_time >
					( h + '' ).padStart( 2, '0' ) +
						':' +
						( m + '' ).padStart( 2, '0' ) && ( $valid = ! 0 ),
				$valid
			);
		}
		function convertTime12to24( time12h ) {
			var time = time12h.split( ' ' );
			if ( time[ 1 ] ) {
				var _timesplit = time[ 0 ].split( ':' ),
					hours = _timesplit[ 0 ],
					minutes = _timesplit[ 1 ];
				return (
					( hours = 1 === hours.length ? 0 + hours : hours ),
					'12' === hours && ( hours = '00' ),
					'PM' === time[ 1 ] &&
						( hours = parseInt( hours, 10 ) + 12 ),
					hours + ':' + minutes
				);
			}
			return time12h;
		}
		return initialize_thwdtp(), { initialize_thwdtp: initialize_thwdtp };
	} )( window.jQuery, window, document );
